/**
 *
 *  User.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace cmdterminal 
{

class User
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _username;
        static const std::string _userAccount;
        static const std::string _userPassword;
        static const std::string _email;
        static const std::string _iphone;
        static const std::string _avatarUrl;
        static const std::string _gender;
        static const std::string _userStatus;
        static const std::string _createTime;
        static const std::string _updateTime;
        static const std::string _idDelete;
        static const std::string _userRole;
        static const std::string _planetCode;
        static const std::string _tags;
        static const std::string _profile;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = int64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit User(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit User(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    User(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    User() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getId() const noexcept;

    ///Set the value of the column id
    void setId(const int64_t &pId) noexcept;


    /**  For column username  */
    ///Get the value of the column username, returns the default value if the column is null
    const std::string &getValueOfUsername() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUsername() const noexcept;

    ///Set the value of the column username
    void setUsername(const std::string &pUsername) noexcept;
    void setUsername(std::string &&pUsername) noexcept;
    void setUsernameToNull() noexcept;


    /**  For column userAccount  */
    ///Get the value of the column userAccount, returns the default value if the column is null
    const std::string &getValueOfUseraccount() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUseraccount() const noexcept;

    ///Set the value of the column userAccount
    void setUseraccount(const std::string &pUseraccount) noexcept;
    void setUseraccount(std::string &&pUseraccount) noexcept;


    /**  For column userPassword  */
    ///Get the value of the column userPassword, returns the default value if the column is null
    const std::string &getValueOfUserpassword() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUserpassword() const noexcept;

    ///Set the value of the column userPassword
    void setUserpassword(const std::string &pUserpassword) noexcept;
    void setUserpassword(std::string &&pUserpassword) noexcept;


    /**  For column email  */
    ///Get the value of the column email, returns the default value if the column is null
    const std::string &getValueOfEmail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEmail() const noexcept;

    ///Set the value of the column email
    void setEmail(const std::string &pEmail) noexcept;
    void setEmail(std::string &&pEmail) noexcept;


    /**  For column iphone  */
    ///Get the value of the column iphone, returns the default value if the column is null
    const std::string &getValueOfIphone() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIphone() const noexcept;

    ///Set the value of the column iphone
    void setIphone(const std::string &pIphone) noexcept;
    void setIphone(std::string &&pIphone) noexcept;
    void setIphoneToNull() noexcept;


    /**  For column avatarUrl  */
    ///Get the value of the column avatarUrl, returns the default value if the column is null
    const std::string &getValueOfAvatarurl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAvatarurl() const noexcept;

    ///Set the value of the column avatarUrl
    void setAvatarurl(const std::string &pAvatarurl) noexcept;
    void setAvatarurl(std::string &&pAvatarurl) noexcept;
    void setAvatarurlToNull() noexcept;


    /**  For column gender  */
    ///Get the value of the column gender, returns the default value if the column is null
    const int8_t &getValueOfGender() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getGender() const noexcept;

    ///Set the value of the column gender
    void setGender(const int8_t &pGender) noexcept;
    void setGenderToNull() noexcept;


    /**  For column userStatus  */
    ///Get the value of the column userStatus, returns the default value if the column is null
    const int32_t &getValueOfUserstatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getUserstatus() const noexcept;

    ///Set the value of the column userStatus
    void setUserstatus(const int32_t &pUserstatus) noexcept;
    void setUserstatusToNull() noexcept;


    /**  For column createTime  */
    ///Get the value of the column createTime, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatetime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatetime() const noexcept;

    ///Set the value of the column createTime
    void setCreatetime(const ::trantor::Date &pCreatetime) noexcept;
    void setCreatetimeToNull() noexcept;


    /**  For column updateTime  */
    ///Get the value of the column updateTime, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatetime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatetime() const noexcept;

    ///Set the value of the column updateTime
    void setUpdatetime(const ::trantor::Date &pUpdatetime) noexcept;
    void setUpdatetimeToNull() noexcept;


    /**  For column idDelete  */
    ///Get the value of the column idDelete, returns the default value if the column is null
    const int8_t &getValueOfIddelete() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIddelete() const noexcept;

    ///Set the value of the column idDelete
    void setIddelete(const int8_t &pIddelete) noexcept;


    /**  For column userRole  */
    ///Get the value of the column userRole, returns the default value if the column is null
    const int32_t &getValueOfUserrole() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getUserrole() const noexcept;

    ///Set the value of the column userRole
    void setUserrole(const int32_t &pUserrole) noexcept;


    /**  For column planetCode  */
    ///Get the value of the column planetCode, returns the default value if the column is null
    const std::string &getValueOfPlanetcode() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPlanetcode() const noexcept;

    ///Set the value of the column planetCode
    void setPlanetcode(const std::string &pPlanetcode) noexcept;
    void setPlanetcode(std::string &&pPlanetcode) noexcept;
    void setPlanetcodeToNull() noexcept;


    /**  For column tags  */
    ///Get the value of the column tags, returns the default value if the column is null
    const std::string &getValueOfTags() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTags() const noexcept;

    ///Set the value of the column tags
    void setTags(const std::string &pTags) noexcept;
    void setTags(std::string &&pTags) noexcept;
    void setTagsToNull() noexcept;


    /**  For column profile  */
    ///Get the value of the column profile, returns the default value if the column is null
    const std::string &getValueOfProfile() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getProfile() const noexcept;

    ///Set the value of the column profile
    void setProfile(const std::string &pProfile) noexcept;
    void setProfile(std::string &&pProfile) noexcept;
    void setProfileToNull() noexcept;



    static size_t getColumnNumber() noexcept {  return 16;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<User>;
#ifdef __cpp_impl_coroutine
    friend CoroMapper<User>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> id_;
    std::shared_ptr<std::string> username_;
    std::shared_ptr<std::string> useraccount_;
    std::shared_ptr<std::string> userpassword_;
    std::shared_ptr<std::string> email_;
    std::shared_ptr<std::string> iphone_;
    std::shared_ptr<std::string> avatarurl_;
    std::shared_ptr<int8_t> gender_;
    std::shared_ptr<int32_t> userstatus_;
    std::shared_ptr<::trantor::Date> createtime_;
    std::shared_ptr<::trantor::Date> updatetime_;
    std::shared_ptr<int8_t> iddelete_;
    std::shared_ptr<int32_t> userrole_;
    std::shared_ptr<std::string> planetcode_;
    std::shared_ptr<std::string> tags_;
    std::shared_ptr<std::string> profile_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[16]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "username,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "userAccount,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "userPassword,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "email,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "iphone,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "avatarUrl,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "gender,";
            ++parametersCount;
        }
        sql += "userStatus,";
        ++parametersCount;
        if(!dirtyFlag_[8])
        {
            needSelection=true;
        }
        sql += "createTime,";
        ++parametersCount;
        if(!dirtyFlag_[9])
        {
            needSelection=true;
        }
        sql += "updateTime,";
        ++parametersCount;
        if(!dirtyFlag_[10])
        {
            needSelection=true;
        }
        sql += "idDelete,";
        ++parametersCount;
        if(!dirtyFlag_[11])
        {
            needSelection=true;
        }
        sql += "userRole,";
        ++parametersCount;
        if(!dirtyFlag_[12])
        {
            needSelection=true;
        }
        if(dirtyFlag_[13])
        {
            sql += "planetCode,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "tags,";
            ++parametersCount;
        }
        if(dirtyFlag_[15])
        {
            sql += "profile,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        } 
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace cmdterminal
} // namespace drogon_model
