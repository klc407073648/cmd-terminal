/**
 *
 *  Interface.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace cmdterminal 
{

class Interface
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _name;
        static const std::string _description;
        static const std::string _url;
        static const std::string _method;
        static const std::string _requestParams;
        static const std::string _requestHeader;
        static const std::string _responseHeader;
        static const std::string _status;
        static const std::string _type;
        static const std::string _createTime;
        static const std::string _updateTime;
        static const std::string _isDelete;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = int64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Interface(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Interface(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Interface(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Interface() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getId() const noexcept;

    ///Set the value of the column id
    void setId(const int64_t &pId) noexcept;


    /**  For column name  */
    ///Get the value of the column name, returns the default value if the column is null
    const std::string &getValueOfName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getName() const noexcept;

    ///Set the value of the column name
    void setName(const std::string &pName) noexcept;
    void setName(std::string &&pName) noexcept;


    /**  For column description  */
    ///Get the value of the column description, returns the default value if the column is null
    const std::string &getValueOfDescription() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDescription() const noexcept;

    ///Set the value of the column description
    void setDescription(const std::string &pDescription) noexcept;
    void setDescription(std::string &&pDescription) noexcept;
    void setDescriptionToNull() noexcept;


    /**  For column url  */
    ///Get the value of the column url, returns the default value if the column is null
    const std::string &getValueOfUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUrl() const noexcept;

    ///Set the value of the column url
    void setUrl(const std::string &pUrl) noexcept;
    void setUrl(std::string &&pUrl) noexcept;
    void setUrlToNull() noexcept;


    /**  For column method  */
    ///Get the value of the column method, returns the default value if the column is null
    const std::string &getValueOfMethod() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getMethod() const noexcept;

    ///Set the value of the column method
    void setMethod(const std::string &pMethod) noexcept;
    void setMethod(std::string &&pMethod) noexcept;


    /**  For column requestParams  */
    ///Get the value of the column requestParams, returns the default value if the column is null
    const std::string &getValueOfRequestparams() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRequestparams() const noexcept;

    ///Set the value of the column requestParams
    void setRequestparams(const std::string &pRequestparams) noexcept;
    void setRequestparams(std::string &&pRequestparams) noexcept;
    void setRequestparamsToNull() noexcept;


    /**  For column requestHeader  */
    ///Get the value of the column requestHeader, returns the default value if the column is null
    const std::string &getValueOfRequestheader() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRequestheader() const noexcept;

    ///Set the value of the column requestHeader
    void setRequestheader(const std::string &pRequestheader) noexcept;
    void setRequestheader(std::string &&pRequestheader) noexcept;
    void setRequestheaderToNull() noexcept;


    /**  For column responseHeader  */
    ///Get the value of the column responseHeader, returns the default value if the column is null
    const std::string &getValueOfResponseheader() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getResponseheader() const noexcept;

    ///Set the value of the column responseHeader
    void setResponseheader(const std::string &pResponseheader) noexcept;
    void setResponseheader(std::string &&pResponseheader) noexcept;
    void setResponseheaderToNull() noexcept;


    /**  For column status  */
    ///Get the value of the column status, returns the default value if the column is null
    const int32_t &getValueOfStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getStatus() const noexcept;

    ///Set the value of the column status
    void setStatus(const int32_t &pStatus) noexcept;


    /**  For column type  */
    ///Get the value of the column type, returns the default value if the column is null
    const int32_t &getValueOfType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getType() const noexcept;

    ///Set the value of the column type
    void setType(const int32_t &pType) noexcept;


    /**  For column createTime  */
    ///Get the value of the column createTime, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatetime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatetime() const noexcept;

    ///Set the value of the column createTime
    void setCreatetime(const ::trantor::Date &pCreatetime) noexcept;


    /**  For column updateTime  */
    ///Get the value of the column updateTime, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatetime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatetime() const noexcept;

    ///Set the value of the column updateTime
    void setUpdatetime(const ::trantor::Date &pUpdatetime) noexcept;


    /**  For column isDelete  */
    ///Get the value of the column isDelete, returns the default value if the column is null
    const int8_t &getValueOfIsdelete() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsdelete() const noexcept;

    ///Set the value of the column isDelete
    void setIsdelete(const int8_t &pIsdelete) noexcept;



    static size_t getColumnNumber() noexcept {  return 13;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<Interface>;
#ifdef __cpp_impl_coroutine
    friend CoroMapper<Interface>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> id_;
    std::shared_ptr<std::string> name_;
    std::shared_ptr<std::string> description_;
    std::shared_ptr<std::string> url_;
    std::shared_ptr<std::string> method_;
    std::shared_ptr<std::string> requestparams_;
    std::shared_ptr<std::string> requestheader_;
    std::shared_ptr<std::string> responseheader_;
    std::shared_ptr<int32_t> status_;
    std::shared_ptr<int32_t> type_;
    std::shared_ptr<::trantor::Date> createtime_;
    std::shared_ptr<::trantor::Date> updatetime_;
    std::shared_ptr<int8_t> isdelete_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[13]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "name,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "description,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "url,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "method,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "requestParams,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "requestHeader,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "responseHeader,";
            ++parametersCount;
        }
        sql += "status,";
        ++parametersCount;
        if(!dirtyFlag_[8])
        {
            needSelection=true;
        }
        sql += "type,";
        ++parametersCount;
        if(!dirtyFlag_[9])
        {
            needSelection=true;
        }
        sql += "createTime,";
        ++parametersCount;
        if(!dirtyFlag_[10])
        {
            needSelection=true;
        }
        sql += "updateTime,";
        ++parametersCount;
        if(!dirtyFlag_[11])
        {
            needSelection=true;
        }
        sql += "isDelete,";
        ++parametersCount;
        if(!dirtyFlag_[12])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace cmdterminal
} // namespace drogon_model
