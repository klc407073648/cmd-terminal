/**
 *
 *  Interface.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include <models/Interface.h>
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::cmdterminal;

const std::string Interface::Cols::_id = "id";
const std::string Interface::Cols::_name = "name";
const std::string Interface::Cols::_description = "description";
const std::string Interface::Cols::_url = "url";
const std::string Interface::Cols::_method = "method";
const std::string Interface::Cols::_requestParams = "requestParams";
const std::string Interface::Cols::_requestHeader = "requestHeader";
const std::string Interface::Cols::_responseHeader = "responseHeader";
const std::string Interface::Cols::_status = "status";
const std::string Interface::Cols::_type = "type";
const std::string Interface::Cols::_createTime = "createTime";
const std::string Interface::Cols::_updateTime = "updateTime";
const std::string Interface::Cols::_isDelete = "isDelete";
const std::string Interface::primaryKeyName = "id";
const bool Interface::hasPrimaryKey = true;
const std::string Interface::tableName = "interface";

const std::vector<typename Interface::MetaData> Interface::metaData_={
{"id","int64_t","bigint(20)",8,1,1,1},
{"name","std::string","varchar(256)",256,0,0,1},
{"description","std::string","varchar(256)",256,0,0,0},
{"url","std::string","varchar(512)",512,0,0,0},
{"method","std::string","varchar(256)",256,0,0,1},
{"requestParams","std::string","text",0,0,0,0},
{"requestHeader","std::string","text",0,0,0,0},
{"responseHeader","std::string","text",0,0,0,0},
{"status","int32_t","int(11)",4,0,0,1},
{"type","int32_t","int(11)",4,0,0,1},
{"createTime","::trantor::Date","datetime",0,0,0,1},
{"updateTime","::trantor::Date","datetime",0,0,0,1},
{"isDelete","int8_t","tinyint(4)",1,0,0,1}
};
const std::string &Interface::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Interface::Interface(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            description_=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["url"].isNull())
        {
            url_=std::make_shared<std::string>(r["url"].as<std::string>());
        }
        if(!r["method"].isNull())
        {
            method_=std::make_shared<std::string>(r["method"].as<std::string>());
        }
        if(!r["requestParams"].isNull())
        {
            requestparams_=std::make_shared<std::string>(r["requestParams"].as<std::string>());
        }
        if(!r["requestHeader"].isNull())
        {
            requestheader_=std::make_shared<std::string>(r["requestHeader"].as<std::string>());
        }
        if(!r["responseHeader"].isNull())
        {
            responseheader_=std::make_shared<std::string>(r["responseHeader"].as<std::string>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<int32_t>(r["status"].as<int32_t>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<int32_t>(r["type"].as<int32_t>());
        }
        if(!r["createTime"].isNull())
        {
            auto timeStr = r["createTime"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updateTime"].isNull())
        {
            auto timeStr = r["updateTime"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["isDelete"].isNull())
        {
            isdelete_=std::make_shared<int8_t>(r["isDelete"].as<int8_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 13 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            description_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            url_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            method_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            requestparams_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            requestheader_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            responseheader_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            status_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            type_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            isdelete_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
    }

}

Interface::Interface(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());

        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());

        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            url_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());

        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            method_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());

        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            requestparams_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());

        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            requestheader_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());

        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            responseheader_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());

        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            status_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            type_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            isdelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
}

Interface::Interface(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("url"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["url"].isNull())
        {
            url_=std::make_shared<std::string>(pJson["url"].asString());
        }
    }
    if(pJson.isMember("method"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["method"].isNull())
        {
            method_=std::make_shared<std::string>(pJson["method"].asString());
        }
    }
    if(pJson.isMember("requestParams"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["requestParams"].isNull())
        {
            requestparams_=std::make_shared<std::string>(pJson["requestParams"].asString());
        }
    }
    if(pJson.isMember("requestHeader"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["requestHeader"].isNull())
        {
            requestheader_=std::make_shared<std::string>(pJson["requestHeader"].asString());
        }
    }
    if(pJson.isMember("responseHeader"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["responseHeader"].isNull())
        {
            responseheader_=std::make_shared<std::string>(pJson["responseHeader"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<int32_t>((int32_t)pJson["status"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<int32_t>((int32_t)pJson["type"].asInt64());
        }
    }
    if(pJson.isMember("createTime"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["createTime"].isNull())
        {
            auto timeStr = pJson["createTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updateTime"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["updateTime"].isNull())
        {
            auto timeStr = pJson["updateTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("isDelete"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["isDelete"].isNull())
        {
            isdelete_=std::make_shared<int8_t>((int8_t)pJson["isDelete"].asInt64());
        }
    }
}

void Interface::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            url_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            method_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            requestparams_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            requestheader_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            responseheader_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            status_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            type_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            isdelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
}
                                                                    
void Interface::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("url"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["url"].isNull())
        {
            url_=std::make_shared<std::string>(pJson["url"].asString());
        }
    }
    if(pJson.isMember("method"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["method"].isNull())
        {
            method_=std::make_shared<std::string>(pJson["method"].asString());
        }
    }
    if(pJson.isMember("requestParams"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["requestParams"].isNull())
        {
            requestparams_=std::make_shared<std::string>(pJson["requestParams"].asString());
        }
    }
    if(pJson.isMember("requestHeader"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["requestHeader"].isNull())
        {
            requestheader_=std::make_shared<std::string>(pJson["requestHeader"].asString());
        }
    }
    if(pJson.isMember("responseHeader"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["responseHeader"].isNull())
        {
            responseheader_=std::make_shared<std::string>(pJson["responseHeader"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<int32_t>((int32_t)pJson["status"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<int32_t>((int32_t)pJson["type"].asInt64());
        }
    }
    if(pJson.isMember("createTime"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["createTime"].isNull())
        {
            auto timeStr = pJson["createTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updateTime"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["updateTime"].isNull())
        {
            auto timeStr = pJson["updateTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("isDelete"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["isDelete"].isNull())
        {
            isdelete_=std::make_shared<int8_t>((int8_t)pJson["isDelete"].asInt64());
        }
    }
}

const int64_t &Interface::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Interface::getId() const noexcept
{
    return id_;
}
void Interface::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename Interface::PrimaryKeyType & Interface::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Interface::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Interface::getName() const noexcept
{
    return name_;
}
void Interface::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Interface::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}




const std::string &Interface::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Interface::getDescription() const noexcept
{
    return description_;
}
void Interface::setDescription(const std::string &pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[2] = true;
}
void Interface::setDescription(std::string &&pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[2] = true;
}


void Interface::setDescriptionToNull() noexcept
{
    description_.reset();
    dirtyFlag_[2] = true;
}


const std::string &Interface::getValueOfUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(url_)
        return *url_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Interface::getUrl() const noexcept
{
    return url_;
}
void Interface::setUrl(const std::string &pUrl) noexcept
{
    url_ = std::make_shared<std::string>(pUrl);
    dirtyFlag_[3] = true;
}
void Interface::setUrl(std::string &&pUrl) noexcept
{
    url_ = std::make_shared<std::string>(std::move(pUrl));
    dirtyFlag_[3] = true;
}


void Interface::setUrlToNull() noexcept
{
    url_.reset();
    dirtyFlag_[3] = true;
}


const std::string &Interface::getValueOfMethod() const noexcept
{
    const static std::string defaultValue = std::string();
    if(method_)
        return *method_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Interface::getMethod() const noexcept
{
    return method_;
}
void Interface::setMethod(const std::string &pMethod) noexcept
{
    method_ = std::make_shared<std::string>(pMethod);
    dirtyFlag_[4] = true;
}
void Interface::setMethod(std::string &&pMethod) noexcept
{
    method_ = std::make_shared<std::string>(std::move(pMethod));
    dirtyFlag_[4] = true;
}




const std::string &Interface::getValueOfRequestparams() const noexcept
{
    const static std::string defaultValue = std::string();
    if(requestparams_)
        return *requestparams_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Interface::getRequestparams() const noexcept
{
    return requestparams_;
}
void Interface::setRequestparams(const std::string &pRequestparams) noexcept
{
    requestparams_ = std::make_shared<std::string>(pRequestparams);
    dirtyFlag_[5] = true;
}
void Interface::setRequestparams(std::string &&pRequestparams) noexcept
{
    requestparams_ = std::make_shared<std::string>(std::move(pRequestparams));
    dirtyFlag_[5] = true;
}


void Interface::setRequestparamsToNull() noexcept
{
    requestparams_.reset();
    dirtyFlag_[5] = true;
}


const std::string &Interface::getValueOfRequestheader() const noexcept
{
    const static std::string defaultValue = std::string();
    if(requestheader_)
        return *requestheader_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Interface::getRequestheader() const noexcept
{
    return requestheader_;
}
void Interface::setRequestheader(const std::string &pRequestheader) noexcept
{
    requestheader_ = std::make_shared<std::string>(pRequestheader);
    dirtyFlag_[6] = true;
}
void Interface::setRequestheader(std::string &&pRequestheader) noexcept
{
    requestheader_ = std::make_shared<std::string>(std::move(pRequestheader));
    dirtyFlag_[6] = true;
}


void Interface::setRequestheaderToNull() noexcept
{
    requestheader_.reset();
    dirtyFlag_[6] = true;
}


const std::string &Interface::getValueOfResponseheader() const noexcept
{
    const static std::string defaultValue = std::string();
    if(responseheader_)
        return *responseheader_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Interface::getResponseheader() const noexcept
{
    return responseheader_;
}
void Interface::setResponseheader(const std::string &pResponseheader) noexcept
{
    responseheader_ = std::make_shared<std::string>(pResponseheader);
    dirtyFlag_[7] = true;
}
void Interface::setResponseheader(std::string &&pResponseheader) noexcept
{
    responseheader_ = std::make_shared<std::string>(std::move(pResponseheader));
    dirtyFlag_[7] = true;
}


void Interface::setResponseheaderToNull() noexcept
{
    responseheader_.reset();
    dirtyFlag_[7] = true;
}


const int32_t &Interface::getValueOfStatus() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Interface::getStatus() const noexcept
{
    return status_;
}
void Interface::setStatus(const int32_t &pStatus) noexcept
{
    status_ = std::make_shared<int32_t>(pStatus);
    dirtyFlag_[8] = true;
}




const int32_t &Interface::getValueOfType() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Interface::getType() const noexcept
{
    return type_;
}
void Interface::setType(const int32_t &pType) noexcept
{
    type_ = std::make_shared<int32_t>(pType);
    dirtyFlag_[9] = true;
}




const ::trantor::Date &Interface::getValueOfCreatetime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createtime_)
        return *createtime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Interface::getCreatetime() const noexcept
{
    return createtime_;
}
void Interface::setCreatetime(const ::trantor::Date &pCreatetime) noexcept
{
    createtime_ = std::make_shared<::trantor::Date>(pCreatetime);
    dirtyFlag_[10] = true;
}




const ::trantor::Date &Interface::getValueOfUpdatetime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updatetime_)
        return *updatetime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Interface::getUpdatetime() const noexcept
{
    return updatetime_;
}
void Interface::setUpdatetime(const ::trantor::Date &pUpdatetime) noexcept
{
    updatetime_ = std::make_shared<::trantor::Date>(pUpdatetime);
    dirtyFlag_[11] = true;
}




const int8_t &Interface::getValueOfIsdelete() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(isdelete_)
        return *isdelete_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Interface::getIsdelete() const noexcept
{
    return isdelete_;
}
void Interface::setIsdelete(const int8_t &pIsdelete) noexcept
{
    isdelete_ = std::make_shared<int8_t>(pIsdelete);
    dirtyFlag_[12] = true;
}




void Interface::updateId(const uint64_t id)
{
    id_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string> &Interface::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "description",
        "url",
        "method",
        "requestParams",
        "requestHeader",
        "responseHeader",
        "status",
        "type",
        "createTime",
        "updateTime",
        "isDelete"
    };
    return inCols;
}

void Interface::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getMethod())
        {
            binder << getValueOfMethod();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getRequestparams())
        {
            binder << getValueOfRequestparams();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRequestheader())
        {
            binder << getValueOfRequestheader();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getResponseheader())
        {
            binder << getValueOfResponseheader();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatetime())
        {
            binder << getValueOfCreatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatetime())
        {
            binder << getValueOfUpdatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIsdelete())
        {
            binder << getValueOfIsdelete();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Interface::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    return ret;
}

void Interface::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getMethod())
        {
            binder << getValueOfMethod();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getRequestparams())
        {
            binder << getValueOfRequestparams();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRequestheader())
        {
            binder << getValueOfRequestheader();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getResponseheader())
        {
            binder << getValueOfResponseheader();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatetime())
        {
            binder << getValueOfCreatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatetime())
        {
            binder << getValueOfUpdatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getIsdelete())
        {
            binder << getValueOfIsdelete();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Interface::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    if(getMethod())
    {
        ret["method"]=getValueOfMethod();
    }
    else
    {
        ret["method"]=Json::Value();
    }
    if(getRequestparams())
    {
        ret["requestParams"]=getValueOfRequestparams();
    }
    else
    {
        ret["requestParams"]=Json::Value();
    }
    if(getRequestheader())
    {
        ret["requestHeader"]=getValueOfRequestheader();
    }
    else
    {
        ret["requestHeader"]=Json::Value();
    }
    if(getResponseheader())
    {
        ret["responseHeader"]=getValueOfResponseheader();
    }
    else
    {
        ret["responseHeader"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getCreatetime())
    {
        ret["createTime"]=getCreatetime()->toDbStringLocal();
    }
    else
    {
        ret["createTime"]=Json::Value();
    }
    if(getUpdatetime())
    {
        ret["updateTime"]=getUpdatetime()->toDbStringLocal();
    }
    else
    {
        ret["updateTime"]=Json::Value();
    }
    if(getIsdelete())
    {
        ret["isDelete"]=getValueOfIsdelete();
    }
    else
    {
        ret["isDelete"]=Json::Value();
    }
    return ret;
}

Json::Value Interface::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 13)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[2]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getUrl())
            {
                ret[pMasqueradingVector[3]]=getValueOfUrl();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getMethod())
            {
                ret[pMasqueradingVector[4]]=getValueOfMethod();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getRequestparams())
            {
                ret[pMasqueradingVector[5]]=getValueOfRequestparams();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getRequestheader())
            {
                ret[pMasqueradingVector[6]]=getValueOfRequestheader();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getResponseheader())
            {
                ret[pMasqueradingVector[7]]=getValueOfResponseheader();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[8]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[9]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getCreatetime())
            {
                ret[pMasqueradingVector[10]]=getCreatetime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getUpdatetime())
            {
                ret[pMasqueradingVector[11]]=getUpdatetime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getIsdelete())
            {
                ret[pMasqueradingVector[12]]=getValueOfIsdelete();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    if(getMethod())
    {
        ret["method"]=getValueOfMethod();
    }
    else
    {
        ret["method"]=Json::Value();
    }
    if(getRequestparams())
    {
        ret["requestParams"]=getValueOfRequestparams();
    }
    else
    {
        ret["requestParams"]=Json::Value();
    }
    if(getRequestheader())
    {
        ret["requestHeader"]=getValueOfRequestheader();
    }
    else
    {
        ret["requestHeader"]=Json::Value();
    }
    if(getResponseheader())
    {
        ret["responseHeader"]=getValueOfResponseheader();
    }
    else
    {
        ret["responseHeader"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getCreatetime())
    {
        ret["createTime"]=getCreatetime()->toDbStringLocal();
    }
    else
    {
        ret["createTime"]=Json::Value();
    }
    if(getUpdatetime())
    {
        ret["updateTime"]=getUpdatetime()->toDbStringLocal();
    }
    else
    {
        ret["updateTime"]=Json::Value();
    }
    if(getIsdelete())
    {
        ret["isDelete"]=getValueOfIsdelete();
    }
    else
    {
        ret["isDelete"]=Json::Value();
    }
    return ret;
}

bool Interface::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    else
    {
        err="The name column cannot be null";
        return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(2, "description", pJson["description"], err, true))
            return false;
    }
    if(pJson.isMember("url"))
    {
        if(!validJsonOfField(3, "url", pJson["url"], err, true))
            return false;
    }
    if(pJson.isMember("method"))
    {
        if(!validJsonOfField(4, "method", pJson["method"], err, true))
            return false;
    }
    else
    {
        err="The method column cannot be null";
        return false;
    }
    if(pJson.isMember("requestParams"))
    {
        if(!validJsonOfField(5, "requestParams", pJson["requestParams"], err, true))
            return false;
    }
    if(pJson.isMember("requestHeader"))
    {
        if(!validJsonOfField(6, "requestHeader", pJson["requestHeader"], err, true))
            return false;
    }
    if(pJson.isMember("responseHeader"))
    {
        if(!validJsonOfField(7, "responseHeader", pJson["responseHeader"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(8, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(9, "type", pJson["type"], err, true))
            return false;
    }
    if(pJson.isMember("createTime"))
    {
        if(!validJsonOfField(10, "createTime", pJson["createTime"], err, true))
            return false;
    }
    if(pJson.isMember("updateTime"))
    {
        if(!validJsonOfField(11, "updateTime", pJson["updateTime"], err, true))
            return false;
    }
    if(pJson.isMember("isDelete"))
    {
        if(!validJsonOfField(12, "isDelete", pJson["isDelete"], err, true))
            return false;
    }
    return true;
}
bool Interface::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Interface::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(2, "description", pJson["description"], err, false))
            return false;
    }
    if(pJson.isMember("url"))
    {
        if(!validJsonOfField(3, "url", pJson["url"], err, false))
            return false;
    }
    if(pJson.isMember("method"))
    {
        if(!validJsonOfField(4, "method", pJson["method"], err, false))
            return false;
    }
    if(pJson.isMember("requestParams"))
    {
        if(!validJsonOfField(5, "requestParams", pJson["requestParams"], err, false))
            return false;
    }
    if(pJson.isMember("requestHeader"))
    {
        if(!validJsonOfField(6, "requestHeader", pJson["requestHeader"], err, false))
            return false;
    }
    if(pJson.isMember("responseHeader"))
    {
        if(!validJsonOfField(7, "responseHeader", pJson["responseHeader"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(8, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(9, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("createTime"))
    {
        if(!validJsonOfField(10, "createTime", pJson["createTime"], err, false))
            return false;
    }
    if(pJson.isMember("updateTime"))
    {
        if(!validJsonOfField(11, "updateTime", pJson["updateTime"], err, false))
            return false;
    }
    if(pJson.isMember("isDelete"))
    {
        if(!validJsonOfField(12, "isDelete", pJson["isDelete"], err, false))
            return false;
    }
    return true;
}
bool Interface::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Interface::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson, 
                                 std::string &err, 
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 256)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 256)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 256)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 256)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 512)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 512)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 256)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 256)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
