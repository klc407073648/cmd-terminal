/**
 *
 *  User.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include <models/User.h>
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::cmdterminal;

const std::string User::Cols::_id = "id";
const std::string User::Cols::_username = "username";
const std::string User::Cols::_userAccount = "userAccount";
const std::string User::Cols::_userPassword = "userPassword";
const std::string User::Cols::_email = "email";
const std::string User::Cols::_iphone = "iphone";
const std::string User::Cols::_avatarUrl = "avatarUrl";
const std::string User::Cols::_gender = "gender";
const std::string User::Cols::_userStatus = "userStatus";
const std::string User::Cols::_createTime = "createTime";
const std::string User::Cols::_updateTime = "updateTime";
const std::string User::Cols::_idDelete = "idDelete";
const std::string User::Cols::_userRole = "userRole";
const std::string User::Cols::_planetCode = "planetCode";
const std::string User::Cols::_tags = "tags";
const std::string User::Cols::_profile = "profile";
const std::string User::primaryKeyName = "id";
const bool User::hasPrimaryKey = true;
const std::string User::tableName = "user";

const std::vector<typename User::MetaData> User::metaData_={
{"id","int64_t","bigint(20)",8,1,1,1},
{"username","std::string","varchar(256)",256,0,0,0},
{"userAccount","std::string","varchar(256)",256,0,0,1},
{"userPassword","std::string","varchar(512)",512,0,0,1},
{"email","std::string","varchar(512)",512,0,0,1},
{"iphone","std::string","varchar(128)",128,0,0,0},
{"avatarUrl","std::string","varchar(1024)",1024,0,0,0},
{"gender","int8_t","tinyint(4)",1,0,0,0},
{"userStatus","int32_t","int(11)",4,0,0,0},
{"createTime","::trantor::Date","datetime",0,0,0,0},
{"updateTime","::trantor::Date","datetime",0,0,0,0},
{"idDelete","int8_t","tinyint(4)",1,0,0,1},
{"userRole","int32_t","int(11)",4,0,0,1},
{"planetCode","std::string","varchar(512)",512,0,0,0},
{"tags","std::string","varchar(1024)",1024,0,0,0},
{"profile","std::string","varchar(1024)",1024,0,0,0}
};
const std::string &User::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
User::User(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["username"].isNull())
        {
            username_=std::make_shared<std::string>(r["username"].as<std::string>());
        }
        if(!r["userAccount"].isNull())
        {
            useraccount_=std::make_shared<std::string>(r["userAccount"].as<std::string>());
        }
        if(!r["userPassword"].isNull())
        {
            userpassword_=std::make_shared<std::string>(r["userPassword"].as<std::string>());
        }
        if(!r["email"].isNull())
        {
            email_=std::make_shared<std::string>(r["email"].as<std::string>());
        }
        if(!r["iphone"].isNull())
        {
            iphone_=std::make_shared<std::string>(r["iphone"].as<std::string>());
        }
        if(!r["avatarUrl"].isNull())
        {
            avatarurl_=std::make_shared<std::string>(r["avatarUrl"].as<std::string>());
        }
        if(!r["gender"].isNull())
        {
            gender_=std::make_shared<int8_t>(r["gender"].as<int8_t>());
        }
        if(!r["userStatus"].isNull())
        {
            userstatus_=std::make_shared<int32_t>(r["userStatus"].as<int32_t>());
        }
        if(!r["createTime"].isNull())
        {
            auto timeStr = r["createTime"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updateTime"].isNull())
        {
            auto timeStr = r["updateTime"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["idDelete"].isNull())
        {
            iddelete_=std::make_shared<int8_t>(r["idDelete"].as<int8_t>());
        }
        if(!r["userRole"].isNull())
        {
            userrole_=std::make_shared<int32_t>(r["userRole"].as<int32_t>());
        }
        if(!r["planetCode"].isNull())
        {
            planetcode_=std::make_shared<std::string>(r["planetCode"].as<std::string>());
        }
        if(!r["tags"].isNull())
        {
            tags_=std::make_shared<std::string>(r["tags"].as<std::string>());
        }
        if(!r["profile"].isNull())
        {
            profile_=std::make_shared<std::string>(r["profile"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 16 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            username_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            useraccount_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            userpassword_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            iphone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            avatarurl_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            gender_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            userstatus_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            iddelete_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            userrole_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            planetcode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            tags_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            profile_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

User::User(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 16)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());

        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            useraccount_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());

        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            userpassword_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());

        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());

        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            iphone_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());

        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            avatarurl_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());

        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            gender_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            userstatus_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            iddelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            userrole_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            planetcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());

        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            tags_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());

        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            profile_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());

        }
    }
}

User::User(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("userAccount"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["userAccount"].isNull())
        {
            useraccount_=std::make_shared<std::string>(pJson["userAccount"].asString());
        }
    }
    if(pJson.isMember("userPassword"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["userPassword"].isNull())
        {
            userpassword_=std::make_shared<std::string>(pJson["userPassword"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("iphone"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["iphone"].isNull())
        {
            iphone_=std::make_shared<std::string>(pJson["iphone"].asString());
        }
    }
    if(pJson.isMember("avatarUrl"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["avatarUrl"].isNull())
        {
            avatarurl_=std::make_shared<std::string>(pJson["avatarUrl"].asString());
        }
    }
    if(pJson.isMember("gender"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["gender"].isNull())
        {
            gender_=std::make_shared<int8_t>((int8_t)pJson["gender"].asInt64());
        }
    }
    if(pJson.isMember("userStatus"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["userStatus"].isNull())
        {
            userstatus_=std::make_shared<int32_t>((int32_t)pJson["userStatus"].asInt64());
        }
    }
    if(pJson.isMember("createTime"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["createTime"].isNull())
        {
            auto timeStr = pJson["createTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updateTime"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["updateTime"].isNull())
        {
            auto timeStr = pJson["updateTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("idDelete"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["idDelete"].isNull())
        {
            iddelete_=std::make_shared<int8_t>((int8_t)pJson["idDelete"].asInt64());
        }
    }
    if(pJson.isMember("userRole"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["userRole"].isNull())
        {
            userrole_=std::make_shared<int32_t>((int32_t)pJson["userRole"].asInt64());
        }
    }
    if(pJson.isMember("planetCode"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["planetCode"].isNull())
        {
            planetcode_=std::make_shared<std::string>(pJson["planetCode"].asString());
        }
    }
    if(pJson.isMember("tags"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["tags"].isNull())
        {
            tags_=std::make_shared<std::string>(pJson["tags"].asString());
        }
    }
    if(pJson.isMember("profile"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["profile"].isNull())
        {
            profile_=std::make_shared<std::string>(pJson["profile"].asString());
        }
    }
}

void User::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 16)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            useraccount_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            userpassword_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            iphone_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            avatarurl_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            gender_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            userstatus_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            iddelete_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            userrole_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            planetcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            tags_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            profile_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
}
                                                                    
void User::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("userAccount"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["userAccount"].isNull())
        {
            useraccount_=std::make_shared<std::string>(pJson["userAccount"].asString());
        }
    }
    if(pJson.isMember("userPassword"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["userPassword"].isNull())
        {
            userpassword_=std::make_shared<std::string>(pJson["userPassword"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("iphone"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["iphone"].isNull())
        {
            iphone_=std::make_shared<std::string>(pJson["iphone"].asString());
        }
    }
    if(pJson.isMember("avatarUrl"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["avatarUrl"].isNull())
        {
            avatarurl_=std::make_shared<std::string>(pJson["avatarUrl"].asString());
        }
    }
    if(pJson.isMember("gender"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["gender"].isNull())
        {
            gender_=std::make_shared<int8_t>((int8_t)pJson["gender"].asInt64());
        }
    }
    if(pJson.isMember("userStatus"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["userStatus"].isNull())
        {
            userstatus_=std::make_shared<int32_t>((int32_t)pJson["userStatus"].asInt64());
        }
    }
    if(pJson.isMember("createTime"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["createTime"].isNull())
        {
            auto timeStr = pJson["createTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updateTime"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["updateTime"].isNull())
        {
            auto timeStr = pJson["updateTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("idDelete"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["idDelete"].isNull())
        {
            iddelete_=std::make_shared<int8_t>((int8_t)pJson["idDelete"].asInt64());
        }
    }
    if(pJson.isMember("userRole"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["userRole"].isNull())
        {
            userrole_=std::make_shared<int32_t>((int32_t)pJson["userRole"].asInt64());
        }
    }
    if(pJson.isMember("planetCode"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["planetCode"].isNull())
        {
            planetcode_=std::make_shared<std::string>(pJson["planetCode"].asString());
        }
    }
    if(pJson.isMember("tags"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["tags"].isNull())
        {
            tags_=std::make_shared<std::string>(pJson["tags"].asString());
        }
    }
    if(pJson.isMember("profile"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["profile"].isNull())
        {
            profile_=std::make_shared<std::string>(pJson["profile"].asString());
        }
    }
}

const int64_t &User::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &User::getId() const noexcept
{
    return id_;
}
void User::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename User::PrimaryKeyType & User::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &User::getValueOfUsername() const noexcept
{
    const static std::string defaultValue = std::string();
    if(username_)
        return *username_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getUsername() const noexcept
{
    return username_;
}
void User::setUsername(const std::string &pUsername) noexcept
{
    username_ = std::make_shared<std::string>(pUsername);
    dirtyFlag_[1] = true;
}
void User::setUsername(std::string &&pUsername) noexcept
{
    username_ = std::make_shared<std::string>(std::move(pUsername));
    dirtyFlag_[1] = true;
}


void User::setUsernameToNull() noexcept
{
    username_.reset();
    dirtyFlag_[1] = true;
}


const std::string &User::getValueOfUseraccount() const noexcept
{
    const static std::string defaultValue = std::string();
    if(useraccount_)
        return *useraccount_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getUseraccount() const noexcept
{
    return useraccount_;
}
void User::setUseraccount(const std::string &pUseraccount) noexcept
{
    useraccount_ = std::make_shared<std::string>(pUseraccount);
    dirtyFlag_[2] = true;
}
void User::setUseraccount(std::string &&pUseraccount) noexcept
{
    useraccount_ = std::make_shared<std::string>(std::move(pUseraccount));
    dirtyFlag_[2] = true;
}




const std::string &User::getValueOfUserpassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(userpassword_)
        return *userpassword_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getUserpassword() const noexcept
{
    return userpassword_;
}
void User::setUserpassword(const std::string &pUserpassword) noexcept
{
    userpassword_ = std::make_shared<std::string>(pUserpassword);
    dirtyFlag_[3] = true;
}
void User::setUserpassword(std::string &&pUserpassword) noexcept
{
    userpassword_ = std::make_shared<std::string>(std::move(pUserpassword));
    dirtyFlag_[3] = true;
}




const std::string &User::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getEmail() const noexcept
{
    return email_;
}
void User::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[4] = true;
}
void User::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[4] = true;
}




const std::string &User::getValueOfIphone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(iphone_)
        return *iphone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getIphone() const noexcept
{
    return iphone_;
}
void User::setIphone(const std::string &pIphone) noexcept
{
    iphone_ = std::make_shared<std::string>(pIphone);
    dirtyFlag_[5] = true;
}
void User::setIphone(std::string &&pIphone) noexcept
{
    iphone_ = std::make_shared<std::string>(std::move(pIphone));
    dirtyFlag_[5] = true;
}


void User::setIphoneToNull() noexcept
{
    iphone_.reset();
    dirtyFlag_[5] = true;
}


const std::string &User::getValueOfAvatarurl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(avatarurl_)
        return *avatarurl_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getAvatarurl() const noexcept
{
    return avatarurl_;
}
void User::setAvatarurl(const std::string &pAvatarurl) noexcept
{
    avatarurl_ = std::make_shared<std::string>(pAvatarurl);
    dirtyFlag_[6] = true;
}
void User::setAvatarurl(std::string &&pAvatarurl) noexcept
{
    avatarurl_ = std::make_shared<std::string>(std::move(pAvatarurl));
    dirtyFlag_[6] = true;
}


void User::setAvatarurlToNull() noexcept
{
    avatarurl_.reset();
    dirtyFlag_[6] = true;
}


const int8_t &User::getValueOfGender() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(gender_)
        return *gender_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &User::getGender() const noexcept
{
    return gender_;
}
void User::setGender(const int8_t &pGender) noexcept
{
    gender_ = std::make_shared<int8_t>(pGender);
    dirtyFlag_[7] = true;
}


void User::setGenderToNull() noexcept
{
    gender_.reset();
    dirtyFlag_[7] = true;
}


const int32_t &User::getValueOfUserstatus() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(userstatus_)
        return *userstatus_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &User::getUserstatus() const noexcept
{
    return userstatus_;
}
void User::setUserstatus(const int32_t &pUserstatus) noexcept
{
    userstatus_ = std::make_shared<int32_t>(pUserstatus);
    dirtyFlag_[8] = true;
}


void User::setUserstatusToNull() noexcept
{
    userstatus_.reset();
    dirtyFlag_[8] = true;
}


const ::trantor::Date &User::getValueOfCreatetime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createtime_)
        return *createtime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &User::getCreatetime() const noexcept
{
    return createtime_;
}
void User::setCreatetime(const ::trantor::Date &pCreatetime) noexcept
{
    createtime_ = std::make_shared<::trantor::Date>(pCreatetime);
    dirtyFlag_[9] = true;
}


void User::setCreatetimeToNull() noexcept
{
    createtime_.reset();
    dirtyFlag_[9] = true;
}


const ::trantor::Date &User::getValueOfUpdatetime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updatetime_)
        return *updatetime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &User::getUpdatetime() const noexcept
{
    return updatetime_;
}
void User::setUpdatetime(const ::trantor::Date &pUpdatetime) noexcept
{
    updatetime_ = std::make_shared<::trantor::Date>(pUpdatetime);
    dirtyFlag_[10] = true;
}


void User::setUpdatetimeToNull() noexcept
{
    updatetime_.reset();
    dirtyFlag_[10] = true;
}


const int8_t &User::getValueOfIddelete() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(iddelete_)
        return *iddelete_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &User::getIddelete() const noexcept
{
    return iddelete_;
}
void User::setIddelete(const int8_t &pIddelete) noexcept
{
    iddelete_ = std::make_shared<int8_t>(pIddelete);
    dirtyFlag_[11] = true;
}




const int32_t &User::getValueOfUserrole() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(userrole_)
        return *userrole_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &User::getUserrole() const noexcept
{
    return userrole_;
}
void User::setUserrole(const int32_t &pUserrole) noexcept
{
    userrole_ = std::make_shared<int32_t>(pUserrole);
    dirtyFlag_[12] = true;
}




const std::string &User::getValueOfPlanetcode() const noexcept
{
    const static std::string defaultValue = std::string();
    if(planetcode_)
        return *planetcode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getPlanetcode() const noexcept
{
    return planetcode_;
}
void User::setPlanetcode(const std::string &pPlanetcode) noexcept
{
    planetcode_ = std::make_shared<std::string>(pPlanetcode);
    dirtyFlag_[13] = true;
}
void User::setPlanetcode(std::string &&pPlanetcode) noexcept
{
    planetcode_ = std::make_shared<std::string>(std::move(pPlanetcode));
    dirtyFlag_[13] = true;
}


void User::setPlanetcodeToNull() noexcept
{
    planetcode_.reset();
    dirtyFlag_[13] = true;
}


const std::string &User::getValueOfTags() const noexcept
{
    const static std::string defaultValue = std::string();
    if(tags_)
        return *tags_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getTags() const noexcept
{
    return tags_;
}
void User::setTags(const std::string &pTags) noexcept
{
    tags_ = std::make_shared<std::string>(pTags);
    dirtyFlag_[14] = true;
}
void User::setTags(std::string &&pTags) noexcept
{
    tags_ = std::make_shared<std::string>(std::move(pTags));
    dirtyFlag_[14] = true;
}


void User::setTagsToNull() noexcept
{
    tags_.reset();
    dirtyFlag_[14] = true;
}


const std::string &User::getValueOfProfile() const noexcept
{
    const static std::string defaultValue = std::string();
    if(profile_)
        return *profile_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getProfile() const noexcept
{
    return profile_;
}
void User::setProfile(const std::string &pProfile) noexcept
{
    profile_ = std::make_shared<std::string>(pProfile);
    dirtyFlag_[15] = true;
}
void User::setProfile(std::string &&pProfile) noexcept
{
    profile_ = std::make_shared<std::string>(std::move(pProfile));
    dirtyFlag_[15] = true;
}


void User::setProfileToNull() noexcept
{
    profile_.reset();
    dirtyFlag_[15] = true;
}


void User::updateId(const uint64_t id)
{
    id_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string> &User::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "username",
        "userAccount",
        "userPassword",
        "email",
        "iphone",
        "avatarUrl",
        "gender",
        "userStatus",
        "createTime",
        "updateTime",
        "idDelete",
        "userRole",
        "planetCode",
        "tags",
        "profile"
    };
    return inCols;
}

void User::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUseraccount())
        {
            binder << getValueOfUseraccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getUserpassword())
        {
            binder << getValueOfUserpassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIphone())
        {
            binder << getValueOfIphone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAvatarurl())
        {
            binder << getValueOfAvatarurl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getGender())
        {
            binder << getValueOfGender();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUserstatus())
        {
            binder << getValueOfUserstatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCreatetime())
        {
            binder << getValueOfCreatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUpdatetime())
        {
            binder << getValueOfUpdatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIddelete())
        {
            binder << getValueOfIddelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getUserrole())
        {
            binder << getValueOfUserrole();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getPlanetcode())
        {
            binder << getValueOfPlanetcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getTags())
        {
            binder << getValueOfTags();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getProfile())
        {
            binder << getValueOfProfile();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> User::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    return ret;
}

void User::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getUseraccount())
        {
            binder << getValueOfUseraccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getUserpassword())
        {
            binder << getValueOfUserpassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIphone())
        {
            binder << getValueOfIphone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAvatarurl())
        {
            binder << getValueOfAvatarurl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getGender())
        {
            binder << getValueOfGender();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUserstatus())
        {
            binder << getValueOfUserstatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCreatetime())
        {
            binder << getValueOfCreatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUpdatetime())
        {
            binder << getValueOfUpdatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIddelete())
        {
            binder << getValueOfIddelete();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getUserrole())
        {
            binder << getValueOfUserrole();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getPlanetcode())
        {
            binder << getValueOfPlanetcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getTags())
        {
            binder << getValueOfTags();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getProfile())
        {
            binder << getValueOfProfile();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value User::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getUseraccount())
    {
        ret["userAccount"]=getValueOfUseraccount();
    }
    else
    {
        ret["userAccount"]=Json::Value();
    }
    if(getUserpassword())
    {
        ret["userPassword"]=getValueOfUserpassword();
    }
    else
    {
        ret["userPassword"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getIphone())
    {
        ret["iphone"]=getValueOfIphone();
    }
    else
    {
        ret["iphone"]=Json::Value();
    }
    if(getAvatarurl())
    {
        ret["avatarUrl"]=getValueOfAvatarurl();
    }
    else
    {
        ret["avatarUrl"]=Json::Value();
    }
    if(getGender())
    {
        ret["gender"]=getValueOfGender();
    }
    else
    {
        ret["gender"]=Json::Value();
    }
    if(getUserstatus())
    {
        ret["userStatus"]=getValueOfUserstatus();
    }
    else
    {
        ret["userStatus"]=Json::Value();
    }
    if(getCreatetime())
    {
        ret["createTime"]=getCreatetime()->toDbStringLocal();
    }
    else
    {
        ret["createTime"]=Json::Value();
    }
    if(getUpdatetime())
    {
        ret["updateTime"]=getUpdatetime()->toDbStringLocal();
    }
    else
    {
        ret["updateTime"]=Json::Value();
    }
    if(getIddelete())
    {
        ret["idDelete"]=getValueOfIddelete();
    }
    else
    {
        ret["idDelete"]=Json::Value();
    }
    if(getUserrole())
    {
        ret["userRole"]=getValueOfUserrole();
    }
    else
    {
        ret["userRole"]=Json::Value();
    }
    if(getPlanetcode())
    {
        ret["planetCode"]=getValueOfPlanetcode();
    }
    else
    {
        ret["planetCode"]=Json::Value();
    }
    if(getTags())
    {
        ret["tags"]=getValueOfTags();
    }
    else
    {
        ret["tags"]=Json::Value();
    }
    if(getProfile())
    {
        ret["profile"]=getValueOfProfile();
    }
    else
    {
        ret["profile"]=Json::Value();
    }
    return ret;
}

Json::Value User::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 16)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUsername())
            {
                ret[pMasqueradingVector[1]]=getValueOfUsername();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUseraccount())
            {
                ret[pMasqueradingVector[2]]=getValueOfUseraccount();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getUserpassword())
            {
                ret[pMasqueradingVector[3]]=getValueOfUserpassword();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[4]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getIphone())
            {
                ret[pMasqueradingVector[5]]=getValueOfIphone();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAvatarurl())
            {
                ret[pMasqueradingVector[6]]=getValueOfAvatarurl();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getGender())
            {
                ret[pMasqueradingVector[7]]=getValueOfGender();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getUserstatus())
            {
                ret[pMasqueradingVector[8]]=getValueOfUserstatus();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getCreatetime())
            {
                ret[pMasqueradingVector[9]]=getCreatetime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getUpdatetime())
            {
                ret[pMasqueradingVector[10]]=getUpdatetime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getIddelete())
            {
                ret[pMasqueradingVector[11]]=getValueOfIddelete();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getUserrole())
            {
                ret[pMasqueradingVector[12]]=getValueOfUserrole();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getPlanetcode())
            {
                ret[pMasqueradingVector[13]]=getValueOfPlanetcode();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getTags())
            {
                ret[pMasqueradingVector[14]]=getValueOfTags();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getProfile())
            {
                ret[pMasqueradingVector[15]]=getValueOfProfile();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getUseraccount())
    {
        ret["userAccount"]=getValueOfUseraccount();
    }
    else
    {
        ret["userAccount"]=Json::Value();
    }
    if(getUserpassword())
    {
        ret["userPassword"]=getValueOfUserpassword();
    }
    else
    {
        ret["userPassword"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getIphone())
    {
        ret["iphone"]=getValueOfIphone();
    }
    else
    {
        ret["iphone"]=Json::Value();
    }
    if(getAvatarurl())
    {
        ret["avatarUrl"]=getValueOfAvatarurl();
    }
    else
    {
        ret["avatarUrl"]=Json::Value();
    }
    if(getGender())
    {
        ret["gender"]=getValueOfGender();
    }
    else
    {
        ret["gender"]=Json::Value();
    }
    if(getUserstatus())
    {
        ret["userStatus"]=getValueOfUserstatus();
    }
    else
    {
        ret["userStatus"]=Json::Value();
    }
    if(getCreatetime())
    {
        ret["createTime"]=getCreatetime()->toDbStringLocal();
    }
    else
    {
        ret["createTime"]=Json::Value();
    }
    if(getUpdatetime())
    {
        ret["updateTime"]=getUpdatetime()->toDbStringLocal();
    }
    else
    {
        ret["updateTime"]=Json::Value();
    }
    if(getIddelete())
    {
        ret["idDelete"]=getValueOfIddelete();
    }
    else
    {
        ret["idDelete"]=Json::Value();
    }
    if(getUserrole())
    {
        ret["userRole"]=getValueOfUserrole();
    }
    else
    {
        ret["userRole"]=Json::Value();
    }
    if(getPlanetcode())
    {
        ret["planetCode"]=getValueOfPlanetcode();
    }
    else
    {
        ret["planetCode"]=Json::Value();
    }
    if(getTags())
    {
        ret["tags"]=getValueOfTags();
    }
    else
    {
        ret["tags"]=Json::Value();
    }
    if(getProfile())
    {
        ret["profile"]=getValueOfProfile();
    }
    else
    {
        ret["profile"]=Json::Value();
    }
    return ret;
}

bool User::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(1, "username", pJson["username"], err, true))
            return false;
    }
    if(pJson.isMember("userAccount"))
    {
        if(!validJsonOfField(2, "userAccount", pJson["userAccount"], err, true))
            return false;
    }
    else
    {
        err="The userAccount column cannot be null";
        return false;
    }
    if(pJson.isMember("userPassword"))
    {
        if(!validJsonOfField(3, "userPassword", pJson["userPassword"], err, true))
            return false;
    }
    else
    {
        err="The userPassword column cannot be null";
        return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(4, "email", pJson["email"], err, true))
            return false;
    }
    else
    {
        err="The email column cannot be null";
        return false;
    }
    if(pJson.isMember("iphone"))
    {
        if(!validJsonOfField(5, "iphone", pJson["iphone"], err, true))
            return false;
    }
    if(pJson.isMember("avatarUrl"))
    {
        if(!validJsonOfField(6, "avatarUrl", pJson["avatarUrl"], err, true))
            return false;
    }
    if(pJson.isMember("gender"))
    {
        if(!validJsonOfField(7, "gender", pJson["gender"], err, true))
            return false;
    }
    if(pJson.isMember("userStatus"))
    {
        if(!validJsonOfField(8, "userStatus", pJson["userStatus"], err, true))
            return false;
    }
    if(pJson.isMember("createTime"))
    {
        if(!validJsonOfField(9, "createTime", pJson["createTime"], err, true))
            return false;
    }
    if(pJson.isMember("updateTime"))
    {
        if(!validJsonOfField(10, "updateTime", pJson["updateTime"], err, true))
            return false;
    }
    if(pJson.isMember("idDelete"))
    {
        if(!validJsonOfField(11, "idDelete", pJson["idDelete"], err, true))
            return false;
    }
    if(pJson.isMember("userRole"))
    {
        if(!validJsonOfField(12, "userRole", pJson["userRole"], err, true))
            return false;
    }
    if(pJson.isMember("planetCode"))
    {
        if(!validJsonOfField(13, "planetCode", pJson["planetCode"], err, true))
            return false;
    }
    if(pJson.isMember("tags"))
    {
        if(!validJsonOfField(14, "tags", pJson["tags"], err, true))
            return false;
    }
    if(pJson.isMember("profile"))
    {
        if(!validJsonOfField(15, "profile", pJson["profile"], err, true))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 16)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool User::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(1, "username", pJson["username"], err, false))
            return false;
    }
    if(pJson.isMember("userAccount"))
    {
        if(!validJsonOfField(2, "userAccount", pJson["userAccount"], err, false))
            return false;
    }
    if(pJson.isMember("userPassword"))
    {
        if(!validJsonOfField(3, "userPassword", pJson["userPassword"], err, false))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(4, "email", pJson["email"], err, false))
            return false;
    }
    if(pJson.isMember("iphone"))
    {
        if(!validJsonOfField(5, "iphone", pJson["iphone"], err, false))
            return false;
    }
    if(pJson.isMember("avatarUrl"))
    {
        if(!validJsonOfField(6, "avatarUrl", pJson["avatarUrl"], err, false))
            return false;
    }
    if(pJson.isMember("gender"))
    {
        if(!validJsonOfField(7, "gender", pJson["gender"], err, false))
            return false;
    }
    if(pJson.isMember("userStatus"))
    {
        if(!validJsonOfField(8, "userStatus", pJson["userStatus"], err, false))
            return false;
    }
    if(pJson.isMember("createTime"))
    {
        if(!validJsonOfField(9, "createTime", pJson["createTime"], err, false))
            return false;
    }
    if(pJson.isMember("updateTime"))
    {
        if(!validJsonOfField(10, "updateTime", pJson["updateTime"], err, false))
            return false;
    }
    if(pJson.isMember("idDelete"))
    {
        if(!validJsonOfField(11, "idDelete", pJson["idDelete"], err, false))
            return false;
    }
    if(pJson.isMember("userRole"))
    {
        if(!validJsonOfField(12, "userRole", pJson["userRole"], err, false))
            return false;
    }
    if(pJson.isMember("planetCode"))
    {
        if(!validJsonOfField(13, "planetCode", pJson["planetCode"], err, false))
            return false;
    }
    if(pJson.isMember("tags"))
    {
        if(!validJsonOfField(14, "tags", pJson["tags"], err, false))
            return false;
    }
    if(pJson.isMember("profile"))
    {
        if(!validJsonOfField(15, "profile", pJson["profile"], err, false))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 16)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool User::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson, 
                            std::string &err, 
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 256)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 256)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 256)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 256)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 512)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 512)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 512)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 512)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1024)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1024)";
                return false;               
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 512)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 512)";
                return false;               
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1024)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1024)";
                return false;               
            }

            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1024)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1024)";
                return false;               
            }

            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
